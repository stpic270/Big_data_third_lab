pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('sikasi')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {

        stage('Login'){
            steps{
                //withCredentials([usernamePassword(credentialsId: 'mle-template', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]){
                //bat 'chcp 65001 && echo %DOCKER_REGISTRY_PWD% | docker login -u %DOCKER_REGISTRY_USER% --password-stdin'}
                sh 'echo $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
//                 sh 'docker login -u %DOCKERHUB_CREDS_USR% -p %DOCKERHUB_CREDS_PSW%'
                }
            }

        stage('Pull image'){
            steps{
                sh '''
                    docker pull stpic270/bd-thl-d:latest
                    docker pull stpic270/bd-secl-cassandra:latest
                '''
            }
        }

        stage('Run container and get move results to cassandra'){
            steps{
                sh 'docker network create third_lab && docker volume create third_lab'
                sh 'docker run -v third_lab:/app/test --name model --network third_lab -d -t stpic270/bd-thl-d'
                
                echo "Waiting 60 seconds for entrypoint script"
                sleep 60
                
                sh  '''
                    docker run -v third_lab:/config --name cassandra --network third_lab -d -t -e JAVA_TOOL_OPTIONS="-Xmx1024m" --memory 1.2g stpic270/bd-secl-cassandra
                    docker exec -t cassandra bash -c "echo '\n' >> config/cassandra_ip.txt && ip -4 -o address >> config/cassandra_ip.txt"
                    docker exec -t model bash -c "scripts/cassandra.sh"
                    '''
                }
        }
	

    stage('Post always'){
            steps{
                 sh 'docker stop cassandra && docker stop model && docker logout'
            }
        }
    }
}
